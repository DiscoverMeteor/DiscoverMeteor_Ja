---
title: Collections
slug: collections
date: 0004/01/01
number: 4
contents: Meteorの基本的な機能であるリアルタイムコレクションについて学ぶ。|どのようにMeteorのデータが同期するのか理解する。|コレクションとテンプレートと連動させる。|ここまでで作った試作品をリアルタイムで動くアプリにする！
paragraphs: 72
---

１章では、クライアントとサーバー間のデータを自動的に同期させる Meteor の特徴についてお話しました。

この章では、これがどのように動いているのかもう少し詳しく見ていき、
データの自動同期を実現させる上で鍵となる Meteor**コレクション**について見ていきます。

コレクションは、永続的な特殊なデータ構造です。サーバー側のMongoDBデータベース内のデータを格納し、
リアルタイムで接続された各ユーザのブラウザと同期処理を行います。

投稿が永続的にユーザー間で共有されるようにしたいので、
それらを保存するために`Posts`と呼ばれるコレクションを作成することから始めます。

コレクションはたいていのアプリにおいてコアとなる部分になります。
ですので常に最初に`lib`ディレクトリの中に配置することから始めます。
まずは、`lib`ディレクトリ内に`collections/` ディレクトリを作成し、中に`posts.js`を格納します。
そして次のように書き込みます。：

~~~js
Posts = new Meteor.Collection('posts');
~~~
<%= caption "collections/posts.js" %>

<%= commit "4-1", "Added a posts collection" %>

client/ でも server/ でもないフォルダのコードは、クライアントとサーバーの両方で動きます。
　そのため、 Postsコレクションはクライアントとサーバーで動きます。
　しかし、コレクションがクライアントとサーバーで行うことは大きく異なります。

<% note do %>

### Varを使うか使わないか？　（？？？）

Meteorでは、var というキーワードは現在のファイルでオブジェクトのスコープを限定します。
　ここで私たちはアプリ全体で使える Posts コレクションを作りたいので、var という用　語を使っていないというわけです。

<% end %>

サーバーでのコレクションは MongoDB と通信して、あらゆる変化を読み書きする役目を果たします。（？？？）
　この意味で通常のデータベースライブラリと比較できます。（？？？）
　一方で、クライアントでのコレクションは　（  subset of the real？）の正確なコピーで、標準的なコレクションです。
　クライアントサイドのコレクションはユーザーが意識することなく 絶えずリアルタイムで最新情報を処理します。

<% note do %>

### Console vs Console vs Console

この章では、ブラウザのコンソールを使っていきます。
　これはターミナルや Mongo シェルとは違います。
　ここでは、そのあたりについてざっくりと解説していきます。（？？？）

#### ターミナル

<%= screenshot "terminal", "The Terminal" %>

- オペレーティングシステムから呼び出される。
- サーバーサイドのconsole.log()は、ここに出力される。
- プロンプト：$
- 別名：Shell、Bash

#### ブラウザコンソール

<%= screenshot "browser-console", "The Browser Console" %>

- ブラウザで JavaScript のコードを実行する。
- クライアントサイドの console.log() をここに出力する。
- プロンプト： ❯
- 別名：JavaScript Console、DevTools Console

#### Mongoシェル

<%= screenshot "mongo-shell", "The Mongo Shell" %>

- meteor mongo を使って、ターミナルから呼び出される。
- 作っているアプリのデータベースに直接アクセスできる。
- プロンプト：>
- 別名：Mongoコンソール

ここで留意すべきことは、$・❯・>といったプロンプト文字をコマンドで入力しなくて良いということです。
　プロンプトより先の文字で始まっていないものは、それより先に行ってたコマンドが出力したものと見なすことができます。


<% end %>

###サーバーサイドのコレクション

サーバーでのコレクションは MongoDB の API のような役割を果たします。
　サーバーサイドのコードで　Posts.insert() や Posts.update() のようなMongoコマンドを書くことができます。
　すると、MongoDB 内に格納されている posts コレクションは変化します。

MongoDB 内を見るために、２つ目のターミナルウィンドウをを開きます。（１つ目のターミナルではまだ meteor が動いている状態です。）
　そうしたら、アプリのディレクトリへ行きましょう。
　そして、Mongo シェルを起動するために meteor mongo コマンドを実行します。
　Mongo シェルでは、通常の Mongo コマンドを入力することができます。
　（また、いつものように ctrl+c で停止することができます。）
　例として、新しい投稿を挿入しましょう。

~~~bash
> db.posts.insert({title: "A new post"});

> db.posts.find();
{ "_id": ObjectId(".."), "title" : "A new post"};
~~~
<%= caption "The Mongo Shell" %>

<% note do %>

### Mongo on Meteor.com

meteor.com にアプリをホスティングする際は、meteor mongo myAppと入力することでデプロイされたアプリのMongoシェルにアクセスすることができます。

さらに、その状態で meteor logs myApp と入力すること、アプリのログを見ることができます。

<% end %>

MongoDB の構文は、JavaScript インターフェースを使っているため、親しみやすくなっています。
　私たちはこれ以上 Mongoシェルでデータ操作をしませんが、MongoDB内に何があるのか確認するために時々のぞき見をするかもしれません。

### クライアントサイドのコレクション

コレクションはクライアントサイドでは、より面白くなってきます。
　クライアントで Posts = new Meteor.Collection('posts'); と宣言すると、作っているものはローカルで、 Mongoコレクションの　( in-browser ?)のキャッシュ（？？？）
　クライアントサイドのコレクションで「キャッシュ」という場合、（it ？）がデータの一部分を保持して、データへのアクセスを高速化させるキャッシュのことを意味しています。

この点を理解することは大事なことです。
　というのは、これが Meteor が動作する方法の基本だからです。
　一般的に、クライアントサイドのコレクションは Mongo コレクションに格納されているすべてのドキュメントの一部分から構成されます。
　（結局のところ、私たちはすべてのデータベースをクライアントに送りたいわけではありません。）

次に、こうしたドキュメントはブラウザのメモリに保存されているので、このドキュメントには基本的に一瞬でアクセスするということを意味しています。
　つまり、データを取ってくるためにクライアントで Posts.find() を呼び出す際、データは事前に読み込まれているのでサーバーやデータベースへのアクセスは速いのです。

<% note do %>

### Introducing MiniMongo

Meteor のクライアントサイドでの実装は MiniMongo と呼ばれます。
　まだ完全な実装ではないので（？？？）、通常の MongoDB の機能が MiniMongo で動かないことがあるかもしれません。
　とはいえ、本書でカバーしているすべての機能は MongoDB と MiniMongo で同じように動きます。

<% end %>

### クライアントとサーバーの通信

ここで重要な点は、どのようにクライアントサイドのコレクションが同じ名前のサーバーサイドのコレクションと同期するのかということです。（この場合では、'posts'）

この点は詳細に説明するよりも、実際に何が起こるのか見る方が良いでしょう。

まず２つのブラウザウィンドウを開いて、両方でブラウザコンソールにアクセスしましょう。
　それから、コマンドラインで Mongo シェルを開きます。
　現段階では、先ほど作った１つのドキュメントがあります。　　（？？？）

~~~bash
> db.posts.find();
{title: "A new post", _id: ObjectId("..")};
~~~
<%= caption "The Mongo Shell" %>

~~~js
❯ Posts.findOne();
{title: "A new post", _id: LocalCollection._ObjectID};
~~~
<%= caption "First browser console" %>

新しい投稿を作りましょう。
　ブラウザウィンドウの一つで、insert コマンドを実行します。

~~~js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
~~~
<%= caption "First browser console" %>

当然のように、投稿はローカルのコレクションに作られました。
Mongo をチェックしましょう。

~~~bash
❯ db.posts.find();
{title: "A new post", _id: ObjectId("..")};
{title: "A second post", _id: 'yyy'};
~~~
<%= caption "The Mongo Shell" %>

ご覧のように、この投稿はクライアントとサーバーをフックするための一行もコードを書くことなく、すべてのMongoDBをさかのぼります。（？？？）
（厳密に言うと、私たちは new Meteor.Collection('posts') という一行のコードを書きました。）
しかし、話はここで終わりません。

２つのブラウザーウィンドウを立ち上げて、ブラウザーコンソールに次のように入力します：

~~~js
❯ Posts.find().count();
2
~~~
<%= caption "Second browser console" %>

その投稿もここにあります！（？？？）
　私たちは更新もせず、
　２つ目のブラウザーと情報をやりとりもしていないのにもせず、
　更新情報を転送するコードも書いていません。（？？？）
　魔法のように一瞬にして、このことが起こります。（？？？）
　この点は、章を進めるにつれ理解できるようになります。

ここで何が起こったかというと、サーバーサイドのコレクションが新しい投稿のクライアントのコレクションに　 （was informed ？）され、MongoDBの投稿を（distributing？）する役割を引き受けて、関係するすべての post コレクションに送り返しています。

ブラウザーコンソールで投稿を取ってくることはそれほど役立ちません。
　私たちはこのデータをテンプレートとつなげる方法を学んでいきます。
　その過程で、シンプルで（prototype＝原始的な？） HTML を機能的なリアルタイムウェブアプリケーションにする方法を学びます。

### Keeping it Real-time

ブラウザーコンソールで　コレクションの中には　１つの（？？？）　がありますが、
　ここでやりたいことはスクリーン上でデータを表示して、そのデータの変化を表示することです。
　そのようにするため、私たちが作ってきた静的データを表示する単純なウェブページのアプリを、動的にデータを変更するリアルタイムウェブアプリにしていきます。

どうやるのか、見ていきましょう。

### データベースにデータを追加する

最初にデータベースにデータを入れます。
　サーバーを立ち上げる時に　Posts コレクションに構造化データを読み込む固定ファイルを処理します。

まず、データベースの中が何もないようにしましょう。
　meteor reset を使うことで、データベースを削除してプロジェクトをリセットします。
　当然のことながら、あなたが実際のプロジェクトに取り組み始めたら、このコマンドに対して十分注意が必要です。

ctrl-c を押して Meteor のサーバーを止めてから、コマンドラインで動かします。

~~~bash
$ meteor reset
~~~

リセットコマンドは MongoDB を完全に空っぽにします。
　これはデータベースが一貫性のない状態に陥る可能性が高い開発では便利なコマンドです。

データベースが空になったので、次のコードを書き込みましょう。
　これでサーバーが起動して空のPostsコレクションを見つけると、３つの投稿読み込みます。

~~~js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  });

  Posts.insert({
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  });

  Posts.insert({
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  });
}
~~~
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

このファイルは server/ ディレクトリにあるので、ユーザーのブラウザで読み込まれることはありません。
　このコードは、サーバーが起動すると瞬時に実行され、Posts コレクション内に３つの投稿を加えるために、データベースで insert を呼び出すようにします。（？？？）
　まだデータセキュリティの対策をしていないため、サーバー上のファイル内でこれを行うのと、ブラウザで行うのとで実質的な違いはありません。

再び meteor でサーバーを起動すると、この３つの投稿はデータベースで読み込まれます。

### ヘルパーを使ってHTMLにデータをつなげる

これでブラウザーコンソールを開くと、MiniMongo 内で読み込まれた３つの投稿を見ることができます。

~~~js
❯ Posts.find().fetch();
~~~
<%= caption "Browser console" %>

この投稿をレンダリングした HTML にするためにテンプレートヘルパーを使います。
　３章では、Meteor がどのようにデータコンテキストを Spacebars テンプレートと結びつけるのか見てきました。 Spacebars テンプレートはシンプルなデータ構造の HTML 表示を作り出します。
　私たちはまさに同じような方法でコレクションデータを結びつけます。
 　静的な JavaScript の postsData オブジェクトを動的なコレクションに置き換えていきましょう。

そういえば、この時点で postsData コードは削除しましょう。
　現在の posts_list.js は、このようにします。

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "2~4" %>

<%= commit "4-3", "Wired collection into `postsList` template." %>

<% note do %>

### Find と Fetch

Meteor での find() は、リアクティブデータソースであるカーソルを返します。
その中身の記録を取り出したい場合は、（ it ？）を配列に変換する fetch() を使います。　

アプリ内の Meteor は明示的に配列に変換することなく、カーソルを繰り返し処理することができます。　
　そのような理由で、実際の Meteor コードで fetch() を見る機会はそれほど多くないでしょう。（また、そのような理由から上記の例で fetch() を使いませんでした。）
　
<% end %>

ここでは、変数から静的な配列の投稿リストを呼び出すのではなく、カーソルをposts ヘルパーに返しています。
　しかし、これは何をするのでしょうか。
ブラウザに戻ると、このように表示されています：

<%= screenshot "4-3", "Using live data" %>

{{#each}} ヘルパーが Posts のすべてを繰り返し処理して、スクリーン上で表示していることがはっきりとわかります。
 サーバーサイドコレクション　MongoDBから投稿を呼び出して、クライアントサイドのコレクションに引き渡します。
それから、Spacebars ヘルパーがそれらをテンプレートに引き渡します。

さらに、もう一歩踏み込みます；コンソールからもう一つ投稿を加えましょう。

~~~js
❯ Posts.insert({
  title: 'Meteor Docs',
  author: 'Tom Coleman',
  url: 'http://docs.meteor.com'
});
~~~
<%= caption "Browser console" %>

ブラウザーを見てみると、このようになっているはずです。

<%= screenshot "4-4", "Adding posts via the console" %>

たった今、あなたは初めて作動中のリアクティビリティを目撃しました。
　 Spacebars に Posts.find() カーソルを繰り返し処理する命令をすると、 Spacebars はそのカーソルの変化を見つけて、スクリーン上で正しいデータを表示するために、とてもシンプルな方法で HTMLに適用します。

<% note do %>

### Inspecting DOM Changes

この場合、最も簡単な変化の可能性はもう一つ <div class="post">...</div> を追加することでした。
　これが本当に起こったことだと確かめたい場合は、DOM inspector を開いて、投稿に対応する<div>要素を選択します。

ここで、JavaScript コンソールで、もう一つの投稿を挿入します。
　DOM inspector に戻ると、新しい投稿に対応する <div> が見つかりますが、
　まだ選択されたままの同じ <div> も存在しています。
　これはいつ要素が再レンダリングしたか、いつ要素が（left alone＝そのまま？）なのか（ tell＝見分ける？）便利な方法です。
　
<% end %>

### コレクションをつなげる: パブリケーションとサブスクリプション

今までは、製品としてのアプリには向いていない autopublish パッケージが有効となっていました。
名前が意味しているように、autopublish パッケージは各コレクションの中のすべてをそれぞれつながったクライアントと共有させます。
 私たちはこうしたことをしたくないので、autopublish を停止させましょう。

新しいターミナルを開いて、次のように打ち込みます：

~~~bash
$ meteor remove autopublish
~~~

これはすぐに有効化されます。
　今ブラウザーを見ると、すべての投稿が消えています！
　それは私たちが autopublish に依存していたからであり、autopublish は投稿に関するクライアントサイドのコレクションがデータベース内のすべての投稿に反映させていたからです。

最終的には、ページネーションなどを考慮して、ユーザーが見る必要のある投稿だけを送る必要があります。
　とはいえ、今のところは Posts の全体にパブリッシュされるように設定します。

そうするために、 publish() 関数を作ります。publish() 関数はすべての投稿を参照するカーソルを返します。

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});
~~~
<%= caption "server/publications.js" %>

クライアントでは、パブリケーションにサブスクライブする必要があります。
main.js に次のようにコードを追加しましょう。

~~~js
Meteor.subscribe('posts');
~~~
<%= caption "client/main.js" %>

<%= commit "4-4", "Removed `autopublish` and set up a basic publication." %>

再びブラウザーをチェックすると、投稿が元に戻っています。ふぅ！

### 結論

それで、私たちは何を達成したのでしょうか？
　ええと、まだユーザーインターフェースはありませんが、私たちが作ったものは実用的なウェブアプリケーションです。
　私たちはこのアプリケーションをインターネットにデプロイすることができます。
　また、ブラウザコンソールを使って新しい投稿をして、世界中のユーザーのブラウザに投稿を表示することができます。
　
