---
title: Templates
slug: templates
date: 0003/01/01
number: 3
points: 1
photoUrl: http://www.flickr.com/photos/73449134@N04/8194499092/
photoAuthor: Mike Lewinski
contents: Meteorのテンプレート言語、Spacebarsの学習。|三つのテンプレートの作成|Meteor マネージャの仕組み|静的データを使った基本構造のプロトタイプを動かす
paragraphs: 46
version: 1.7.1
---

Meteorでの開発を簡単にするため、アウトサイドインのアプローチを取ることにします。
要するに、私たちは最初にイマイチなHTMLとJavaScriptで外側の骨組みを作り、それから後でアプリが内側で動くように繋いでいきます。

つまり、この章では `/client`ディレクトリの内側で何が起きるのかに関心を払うだけとなります。

では、`/client`ディレクトリの中に`main.html`という新しいファイルを作って、次のようなコードを書き込みましょう：

~~~html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    <header class="navbar navbar-default" role="navigation">
      <div class="navbar-header">
        <a class="navbar-brand" href="/">Microscope</a>
      </div>
    </header>
    <div id="main" class="row-fluid">
      {{> postsList}}
    </div>
  </div>
</body>
~~~
<%= caption "client/main.html" %>

これは　アプリのメインテンプレートになります。ご覧のように、`{{> postsList}}`タグ以外はすべてHTMLです。`{{> postsList}}`タグは、これから見ていくpostsListテンプレートの挿入場所となります。では、いくつかテンプレートを作っていきましょう。

### Meteor テンプレート

基本的に、ソーシャルニュースサイトは投稿のリストによって構成されています。私たちはまさにそのようにテンプレートを作っていきます。

では、`/client`の中に`/templates`ディレクトリを作りましょう。このディレクトリに全てのテンプレートを配置する事になります。さらに投稿に関連したテンプレートをまとめておくために、`/templates`内に`/posts`ディレクトリを作ります。

<% note do %>

### ファイル検索機能

Meteorは素晴らしいことにファイルを探してくれます。`/client`ディレクトリ内のどこにコードを入れようと、Meteorはコードを見つけだし確実にコンパイルします。つまり、JavaScriptやCSSにインクルードパスを記述する必要はありません。

また、同じディレクトリにすべてのファイルを置くこともできます。さらには、同じファイルにすべてのコードを置くこともできます。

しかし、Meteorはすべてのコードを一つにまとめて縮小するので、ファイル内をきちんと整理して、きれいなファイル構造にすると良いでしょう。

<% end %>

これから２つ目のテンプレートを作っていきます。`client/templates/posts`の中に`posts_list.html`を作りましょう。

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/templates/posts/posts_list.html" %>

次に`post_item.html`を作ります。

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
  </div>
</template>
~~~
<%= caption "client/templates/posts/post_item.html" %>

テンプレート要素の`name="postsList"`属性に注目してください。このname属性はテンプレートの場所をMeteorに把握させるために使います。(*実ファイル名* は関連しないことに注意してください)。

ここでMeteorのテンプレートシステム、**Spacebars**について紹介します。
SpacebarsはシンプルなHTMLに、３つの機能を付け加えます： *内部テンプレート(inclusions)*と*式*と*ブロックヘルパー*です。

*内部テンプレート*では`{{> templateName}}`構文を使い、構文記述箇所を同じ名前（今回は`postItem`）のテンプレートと置き換えるよう Meteorに指示します。

*式*は`{{title}}`のように記述し、カレントオブジェクトのプロパティを呼び出すか、後述するテンプレートマージャーで定義されているテンプレートヘルパーの返り値です。

最後に、ブロックヘルパーはテンプレートのフローをコントロールする特別なタグで、`{{#each}}…{{/each}}`や`{{#if}}…{{/if}}`があります。

<% note do %>

### 他の機能について

`Spacebars`について更に学びたい場合は、[Spacebarsドキュメンテーション](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md)を参照してください。

<% end %>

ここまでの知識が備わると、ここでどんなことが起こっているのか簡単に理解することができます

最初に`postsList`テンプレートについてですが、`{{#each}}…{{/each}}`ブロックヘルパーを使い`posts`オブジェクトに繰り返し処理を行っています。繰り返し毎に、`postItem`テンプレートをインクルードしています。

あれ？`posts`オブジェクトはどこからやって来たんだろう？いい質問です。実際のところ、`posts`は**テンプレートヘルパー**であり、動的に書き換わる値と考えてください。

`postItem`テンプレート自体は簡単です。三つの式を使っているだけです: `{{url}}`と`{{title}}`は文書のプロパティを返し,`{{domain}}` はテンプレートヘルパーを呼び出しています。


### テンプレートヘルパー

ここまで私たちはSpacebarsについて取り組みました。Spacebarsはいくつかのタグが散りばめられたHTMLです。
PHPのような他の言語（あるいは、JavaScriptが含まれた通常のHTMLページでさえ）と違って、Meteorはテンプレートとロジックを分離させます。テンプレート自体が分離させるわけではありません。

テンプレートをうまく使うには、**ヘルパー**が必要です。このヘルパーは料理ををウェイター（テンプレート）に渡す前に、生の食材（データ）をとってきて、調理をするシェフのようなものと見なすことができます。

言い換えると、テンプレートの役割は変数を表示をすることや変数をループすることに限定されますが、ヘルパーはそれぞれの変数に値を割り当てる役割を果たしています。

<% note do %>

### コントローラー?

テンプレートヘルパーを含むファイルは、一種のコントローラとしての考えることはできるかもしれません。
しかし、あいまいな言い方ですが、（少なくともMVCにおける）コントローラとは、わずかに異なる役割を持っています。

ですので、我々は用語による分類をやめることに決めました。テンプレートと対になるJavaScriptコードについて話す場合は、単純に「テンプレートのヘルパー」もしくは「テンプレートのロジック」と言います。

<% end %>
To keep things simple, we'll adopt the convention of naming the file containing the helpers after the template, but with a **.js** extension. So let's create `posts_list.js` inside `/client/templates/posts` right away and start building our first helper:

物事をシンプルに保つためにヘルパーを含むファイルの命名規則はテンプレートと同じものを採用しますが、**.js**の拡張子を付けます。それでは、`/client/templates/posts`内に`posts_list.js`をs作成して最初のヘルパーを作っていきましょう。

~~~js
var postsData = [
  {
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  },
  {
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  },
  {
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  }
];
Template.postsList.helpers({
  posts: postsData
});
~~~
<%= caption "client/templates/posts/posts_list.js" %>

正しく記述できていれば、ブラウザでは次のように表示されているはずです。

<%= screenshot "3-1", "Our first templates with static data" %>


私たちはここで２つのことをしています。まず１つめに`postsData`配列の中でダミーの試作データを設定しています。通常、データはデータベースからやって来るのですが、この点は次の章で学びますので、今は静的データを使って「ごまかして」います。

２つめに、Meteorの`Template.postsList.helpers()`関数を使って、`posts`という`postsData`配列を返すだけのテンプレートヘルパーを定義しています。

覚えているでしょうか？ `postsList`テンプレートで使った`posts`ヘルパーです。

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/templates/posts/posts_list.html" %>

`posts`ヘルパーを定義したことで、テンプレートで`postsData`配列を反復処理して、配列内の各オブジェクトを`postItem`テンプレートへ渡すことができるようになるので、`postsList`テンプレートが使えるようになりました。

<%= commit "3-1", "Added basic posts list template and static data." %>

### `domain` ヘルパー

同様に、`post_item.js`を作成して、`postItem`テンプレートのロジックを定義します:

~~~js
Template.postItem.helpers({
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/templates/posts/post_item.js" %>

`domain`ヘルパーの値は配列ではなく、匿名関数です。単純なダミーデータと比べて、より一般的（そして有用）なパターンです。

<%= screenshot "3-2", "Displaying domains for each links." %>

`domain`ヘルパーはURLを取得し、JavaScriptマジックを使ってドメイン名を返します。しかし、urlはどこから取得してるのでしょう？

その答えは`posts_list.html`テンプレートにあります。`{{#each}}` ブロックヘルパーは配列の繰り返し処理だけではなく、**ブロック内部の`this`に反復オブジェクトを設定する**という処理も行っていたのです。

つまり、`{{#each}}`タグの間では、投稿情報を順次`this`に割り当て、インクルードしたテンプレートのマネージャー(`post_item.js`)を拡張します。

なぜ`this.url`が投稿情報のURLを正しく返せるのか、それ以上に、`post_item.html` テンプレート内で`{{title}}`,
`{{url}}`を使うと、Meteorが`this.title` 、`this.url`の値を正しく返すことができるのかを理解できたと思います。

<%= commit "3-2", "Setup a `domain` helper on the `postItem`." %>


<% note do %>

### JavaScript マジック

Meter固有の方法ではありませんが、このJavaScriptマジックを簡単に説明すると、まず、メモリ上にHTML要素である空のアンカー(a要素)を作成します。

そして、`href`属性に投稿情報のURLを設定します。(先ほど示したように`this`にはオブジェクトが正しく設定されています)

最後に`a`要素には`hostname`プロパティを使ってURLからドメイン名だけを返します。

<% end %>

ここまで正しく進めていれば、ブラウザで投稿のリストを見ることができるでしょう。このリストは単なる静的データなので、まだMeteorのリアルタイムな機能を使っていません。次の章でこの状態を修正する方法を学びます！


<% note do %>

### Hot Code リロード

ファイル変更の際に手動でブラウザをリロードをする必要がないことにお気づきでしょうか。

これはMeteorがプロジェクトディレクトリ内のすべてのファイルを読み込んで、変更点を見つけると自動的にブラウザを再読み込みするためです。

Meteorのホットコードリロードはとてもスマートで、コードとアプリの2つの状態をリフレッシュします！

<% end %>
