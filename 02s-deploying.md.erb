---
title: Deployment
slug: deploying
date: 0002/01/02
number: 2.5
points: 1
sidebar: true
photoUrl: http://www.flickr.com/photos/monomaniacgarage/10703829133/
photoAuthor: Monomaniacgarage
contents: Meteor.com上でデプロイする方法|Modulus上でデプロイする方法|Meteor upを使って自分のサーバー上でデプロイをする方法
paragraphs: 46
version: 1.7.1
---

完成するまで公開せずにプロジェクトを進める人もいれば、できるだけ速くプロジェクトを公開する人もいます。

もしあなたが前者であれば、とりあえずローカルでの開発をするでしょう、そうであればこの章を飛ばしてもらって構いません。一方で、Meteorアプリケーションをオンラインでデプロイする方法を学びたいのであれば、この章で解説します。

Meteorアプリケーションをデプロイするいくつかの方法を学びます。本書で構築するMicroscopeを作っている場合や、他のMeteorアプリケーションを構築している場合に関わらず、本章で解説している方法を使って開発プロセス内のどのタイミングでもデプロイすることができます。では始めましょう！

<% note do %>

### サイドバーについて

ここは**サイドバー**の章です。 サイドバーは本書の他の部分から離れて、もっと一般的なMeteorのトピックについて深く検証していきます。

ですから、もしMicroscopeの構築を優先にしたいのであれば、今の時点ではここを飛ばして、後からここに戻ってきても全く問題ありません。

<% end %>

### Meteor上でのデプロイ

Meteorのサブドメイン（例：`http://myapp.meteor.com`）でデプロイするのが一番簡単な方法なので、まずこのデプロイ方法から試していきます。この方法は、初期段階で他の人にあなたのアプリを見せる場合や、素早くステージングサーバーを用意したい場合に役立ちます。

Meteorのデプロイはとてもシンプルです。ターミナルを開き、Meteorアプリケーションのディレクトリで、以下のコマンドを入力します：

~~~bash
$ meteor deploy myapp.meteor.com
~~~

もちろん"myapp" の部分は自分が付けた名前に置き換える必要があります。使われていない名前にしたほうが良いでしょう。

今回が初めてのデプロイであれば、Meteorのアカウントを作成するためのプロンプトが表示されます。全てがうまくいったら、数秒後に`http://myapp.meteor.com`であなたのアプリにアクセスすることができる様になります。

ホストしているインスタンスのデーターベースに直接アクセスしたり、アプリケーションのカスタムドメインの環境の設定をする方法などの情報については[公式ドキュメント](http://docs.meteor.com/#deploying) をご参照ください。

### Modulus上でのデプロイ

[Modulus](https://modulus.io/)はNode.jsアプリケーションをデプロイするのに有力な選択肢です。Meteorを公式にサポートする数少ないPaaS (platform-as-a-service) プロバイダーの中の一つで、すでに多くの人がプロダクションレベルでMeteorアプリを運用しています。

Modulusについて、より詳しく学びたい場合は[Meteorアプリケーション開発ガイド](http://help.modulus.io/customer/portal/articles/1647770-using-meteor-with-modulus)を読むと良いでしょう。

### Meteor Up

クラウドソリューションは毎日新しいものが出てきていますが、たいてい独自の問題や制限を持っています。そのため独自のサーバー上にMeteorアプリケーションを構築するのがベストな方法でしょう。唯一の難点はプロダクションレベルのデプロイを行うのはシンプルではないということです。

[Meteor Up](https://github.com/arunoda/meteor-up) （または、省略して`mup`）はMeteorアプリケーションの設定とデプロイを行うためのコマンドラインツールで、デプロイをシンプルにしてくれます。`Meteor Up`を使ってMicroscopeをデプロイする方法を見て行きましょう。

まずは、サーバーが必要です。$5/月で始めることができる[Digital Ocean](http://digitalocean.com)、マイクロインスタンスを無料（といっても、すぐにスケーリングの問題に直面するでしょう。しかし、Meteor Upを試すだけなら十分です。）で利用できる[AWS](http://aws.amazon.com/)がお勧めです。

どちらのサービスを選んでも、サーバのIPアドレス、ログインアカウント（通常は`root`や`ubuntu`）、パスワードを取得することになります。この情報はすぐあとで必要になるので、安全な場所に保管しておいてください。

### Meteor Upを初期化する

では、`npm`を使ってMeteor Upをインストールすることから始めましょう。

~~~bash
npm install -g mup
~~~

次に、デプロイ毎にMeteor Upの設定を保持する特別なディレクトリを分けて作成します。このディレクトリを分離する理由は、特にパブリックなコードベース上で作業する際、Gitリポジトリにプラベートな証明書を含むべきではないということが挙げられます。

さらに、複数の分かれたディレクトリを使うことで、平行して複数のMeteorアプリケーションの設定を管理することができます。例えば、プロダクションやステージングなど複数のインスタンスがある場合に便利です。

さて、新しいディレクトリを作り、新しいMeteor Upプロジェクトのためのを初期化を行いましょう。

~~~bash
mkdir ~/microscope-deploy
cd ~/microscope-deploy
mup init
~~~

<% note do %>

### Dropboxでの共有

あなたと、あなたのチーム全員が同じデプロイ設定を共有するためのシンプルな方法は、Meteor Upの設定フォルダーをDropbox、またはそれに類似するサービス上に作ることです。

<% end %>

### Meteor Upの設定

新しいプロジェクトを初期化したら、Meteor Upは`mup.json`と`setting.json`という2つのファイルが生成されます。

`mup.json`はデプロイに関連する全ての設定が含まれています。`settings.json`にはアプリケーションに関する設定（OAuthトークン、解析トークンなど）が含まれます。

次は`mup.json`ファイルを設定していきましょう。以下は、`mup init`で生成されたデフォルトの`mup.json`です。空白の部分を自分で埋めていく必要があります。

~~~js
{
  //server authentication info
  "servers": [{
    "host": "hostname",
    "username": "root",
    "password": "password"
    //or pem file (ssh based authentication)
    //"pem": "~/.ssh/id_rsa"
  }],

  //install MongoDB in the server
  "setupMongo": true,

  //location of app (local directory)
  "app": "/path/to/the/app",

  //configure environmental
  "env": {
    "ROOT_URL": "http://supersite.com"
  }
}
~~~
<%= caption "mup.json" %>

それぞれの項目について見て行きましょう。

**サーバの認証**

Meteor Upがパスワード、及びプライベートキー（PEM）をベースにした認証をサポートしていることに気付いたでしょうか。ほとんどのクラウドプロバイダで利用できるようになっています。

**重要**: パスワードベースの認証を利用する場合、`sshpass`がインストールされていることを確認してください（[詳細](https://gist.github.com/arunoda/7790979)）。

**MongoDBの設定**

次はアプリケーションで利用するMongoDBデータベースの設定です。充実したサポートや管理ツールがあるため、[Compose](https://www.compose.io)など、クラウドのMongoDBサービスを利用することをお勧めします。

Composeを利用するなら、`setupMongo`を`false`に設定し、`mup.json`の`env`ブロックに環境変数`MONGO_URL`を追加します。Meteor Upと一緒にMongoDBをホストする場合には、`setupMongo`を`true`に設定するだけで、残りはMeteor Upが面倒を見てくれます。

**Meteorアプリケーションのパス**

Meteor Upの設定は異なるディレクトリで管理されているので、`app`プロパティでアプリケーションの参照先を設定しなければなりません。アプリケーションのディレクトリ内で`pwd`コマンドを実行して得られるローカルのフルパスを設定します。

**環境変数**

`env`ブロック内にはアプリケーションで使う全ての環境変数（`ROOT_URL`や`MAIL_URL`など）を設定することができます。

### 設定とデプロイ

デプロイすることができるまでには、Meteorアプリケーションをホストするためにサーバを設定する必要があります。この複雑な作業はMeteor Upがカプセル化した1つのコマンドだけで行えるようになっています！

~~~bash
mup setup
~~~

サーバのスペックやネットワークの状況により、完了までに2〜3分かかるかもしれません。セットアップが成功すると、以下のコマンドでアプリケーションをデプロイすることができるようになります。 

~~~bash
mup deploy
~~~

このコマンドはMeteorアプリケーションをバンドルし、設定した通りにサーバへデプロイします。

### ログを表示する

ログはとても重要で、Meteor Upでは`tail -f`コマンドと同等の機能で簡単にログを扱うことができます。以下のコマンドを打ってください。

~~~bash
mup logs -f
~~~

ここまでで、Meteor Upでできることを簡単にまとめました。さらに学びたい場合には[Meteor UpのGitHubレポジトリ](https://github.com/arunoda/meteor-up)を見てください

ここで紹介したMeteorアプリケーションをデプロイする3つの方法は、ほとんどの場合で通用します。もちろん、完全に自分で管理したり、Meteorサーバをスクラッチで設定したい場合もあるでしょう。でも、その話題は別の機会にすることにします...もしかしたら別の本で！