---
title: Getting Started
slug: getting-started
date: 0002/01/01
number: 2
points: 1
photoUrl: http://www.flickr.com/photos/ikewinski/9511230392/
photoAuthor: Mike Lewinski
contents: Meteorをインストールする。|５種類のMeteorパッケージについて学ぶ。|Meteorアプリケーションのファイル構成をセットアップする。
paragraphs: 49
---

第一印象は重要です。Meteorのインストールプロセスは比較的痛みを伴いません。

大抵の場合最初にターミナルウインドウを開けて、以下をタイプするだけでMeteorがインストールできます。

~~~bash
$ curl https://install.meteor.com | sh
~~~

これでMeteorをあなたのシステム上に実行させ、Meteorを使う準備ができます。

<% note do %>

### *Not* インストールしてはいけない場合

ローカルにMeteorをインストールできない（もしくはしたくない場合）、ここを[Nitrous.io](http://nitrous.io).

を確認する事をお勧めします。Nitrous.io はアプリを実行させ、ブラウザー上でコードを編集させてくれるサービスです。
そして、短いガイドを[a short guide](https://www.discovermeteor.com/blog/meteor-nitrous)に描いたのでセットアップするのに便利だと思います。

<% end %>

### 簡単なアプリの作成。

Meteorをインストールしたので、簡単なアプリを作成してみましょう。まず,
Meteorのコマンドラインのツール'meteor'を使います。

~~~bash
$ meteor create microscope
~~~

このコマンドはMeteorをダウンロードして、基本的な物をセットアップしてくれ、Meteorプロジェクトの準備をしてくれます。これが終わったら、`microscope/`ディレクトリーをみて、次の項目が構成されているか確認してください。

~~~bash
microscope.css
microscope.html
microscope.js
~~~

Meteorがあなたの為に作ったアプリは簡単なパターンのお手本を示すボイラープレートアプリケーションです。

私たちのアプリが沢山の事をしなくても、実行はできます。アプリを実行するにはタームなるに戻って次をタイプします：

~~~bash
$ cd microscope
$ meteor
~~~

次にブラウザで`http://localhost:3000/` (もしくは、`http://0.0.0.0:3000/`でも同じです)にアクセスすると、以下の様な画面が表示されるはずです。


<%= screenshot "2-1", "Meteor's Hello World." %>

<%= commit "2-1", "Created basic microscope project." %>

おめでとうございます！初めてMeteorでアプリを実行する事ができました。ところで、アプリを一旦止めるには、アプリが起動しているターミナルタブで`ctrl+c`を押してください。

また、Gitを使っているなら`git init`でリポジトリを初期化する良いタイミングです。


<% note do %>

### バイバイMeteorite

MeteorがMeteoriteと呼ばれる外部のパッケージマネージャーに頼っていた時期がありました。Meteor Ver0.9.0以来、Meteor自体に吸収されてからにMeteoriteはもう必要なくなりました。


もしあなたがこの本、もしくはMeteor関連のマテリアルをブラウズしている間に、Meteoriteの `mrt`のコマンドラインのユーティリティに関連するものに出くわしたら、`meteor`に置き換えるだけで問題ありません。

<% end %>

### パッケージを追加する

では、Meteorのパッケージマネージャーを使って、プロジェクトに[Bootstrap](http://getbootstrap.com/)を追加しましょう。

通常通り手動でCSSとJavaScriptファイルを追加する方法と何も変わりませんが、パッケージマネージャーでインストールすることで、メンテナにパッケージの更新を任せる事ができます。

続いて、[Underscore](http://underscorejs.org/)パッケージも追加します。UnderscoreはJavaScriptのユーティリティライブラリでJavaScriptのデータ構造を操作するのにとても便利なライブラリです。

`Bootstrap`パッケージは`twbs`ユーザによってメンテナンスされていて、パッケージ名は`twbs:bootstrap`になります。

一方で、`underscore`パッケージはMeteorの「公式」パッケージの一部で、フレームワークにバンドルされているため、作者は記載されません。

~~~bash
$ meteor add twbs:bootstrap
$ meteor add underscore
~~~

ここでは、Bootstrap**3**を追加していることに注意してください。本書のスクリーンショットの中には、Bootstrap**2**で構築された古いMicroscopeのものも含まれています。そのため、見た目が少し異なるかもしれません。

<%= commit "2-2", "Added bootstrap and underscore packages." %>

<% note do %>

### パッケージについて

Meteorにおけるパッケージについて、具体的に説明しておきましょう。Meteorのパッケージには5つの基本型があります。

- Meteorのコア自体は"**Meteor platform packages**"という単位に分割されています。これらのパッケージは全てのMeteorアプリケーションに含まれ、通常は開発者が気にする必要はありません。
- 通常のMeteorパッケージは"**isopacks**"、またはIsomorphicパッケージ（クライアントとサーバの両方で動作するという意味です）と呼ばれています。`accounts-ui`や`appcache`のような**First-party packages**はMeteorのコアチームによってメンテナンスされていて、[Meteorにバンドルされています](http://docs.meteor.com/#packages)。
- **Third-party packages**は、単なるisopackで、他のユーザーによって開発され、Meteorのパッケージサーバーにアップロードされているパッケージです。これらのパッケージは[Atmosphere](http://atmosphere.meteor.com)もしくは `meteor search`コマンドで検索することができます。
- **Local packages** はあなたが自分でカスタマイズできるパッケージで、`/packages`のディレクトリに入れておけます。
- **NPM packages** (Node.jsパッケージモジュール) は Node.jsパッケージのことです。Meteorアプリケーションでそのまま利用することはできませんが、上記のタイプのパッケージであれば、*使用できる*かもしれません。

<% end %>

### Meteorアプリケーションのファイル構成

コーディングを始める前に、私たちはプロジェクトを適切に設定する必要があります。まずは綺麗に構築ができるよう`microscope`ディレクトリ内の`microscope.html`と、 `microscope.js`, そして `microscope.css`を削除します。

次に、 `/microscope`以下に次の4つのルートディレクトリを作ります。: `/client`, `/server`, `/public`, `/lib`

その次に、空の`main.html`と`main.js`ファイルを`/client`の中に作成します。この作業をすることでアプリケーションが動作しなくなっても気にしないでください。次の章でこれらのファイルにコードを書いていきます。

このいくつかのディレクトリは特別であることをここで述べさせていただきます。コーディングしていくにあたり、Meteorにはいくつかのルールがあります：

- `/server`ディレクトリにあるコードはサーバー上でのみ実行されます。
- `/client`ディレクトリにあるコードはクライアント上でのみ実行されます。
- 他のものは全てクライアントとサーバーの両方で実行されます。
- フォントや画像などの静的なアセットは`/public`ディレクトリに置きます。

それから、Meteorがファイルをロードする順番をどう決めているかを知ることはとても役に立ちます。

- `/lib`にあるファイルは何よりも*先に*ロードされます。
- どの`main.*` ファイルは何よりも*後に*ロードされます。
- その他のものはファイル名のアルファベット順にロードされます。

Meteorにはこれらのルールがあるものの、もしあなたが望まないのでれば、このファイル構成の定義は強制されません。そのため、この構成は私たちが提案するものであり、決められたルールではありません。

これについてもっと詳しく知りたければ、[Meteorの公式ドキュメント](http://docs.meteor.com/#structuringyourapp)を一読することをお勧めします。

<% note do %>

### MeteorはMVC?

Ruby on Railなど、他のフレームワークからMeteorに移って来ている人なら、MeteorアプリはMVC(Model View Controller)パターンを採用しているのかと疑問に思っているかもしれません。

簡単に言うと答えはノーです。Railsと違って、Meteorはあなたのアプリに対して決まった構成を押し付けることはしません。ですので、本書ではアクロニム（頭文字）について深く考えずに、私達が理解しやすいようにコードをレイアウトします。

<% end %>

### Publicディレクトリは?

はい、うそをついてました。Microscopeは静的アセットを使わないため`public/`ディレクトリは実際には必要ないのです。しかし、他のほとんどのMeteorアプリケーションでは少なくとも何枚かの画像を含んでいるため、私たちはこれを含むことは必要だと考えました。

ところで、もう一つ、`.meteor`という隠しディレクトリについて気づかれたのではないでしょうか。Meteor自身のコードがここに格納されていますので、これに手を加えることは大体悲惨な結果を迎えることになります。事実、このディレクトリは全く見る必要のないものです。ただし、例外として`.meteor/packages`ファイルと`.meteor/release`ファイルには、それぞれMeteorのバージョンと、あなたのスマートパッケージのリストが記述されています。パッケージ追加したり、Meteorのバージョンを変えた場合には、これらのファイルの変更を確認することは役に立ちます。

<% note do %>

### アンダースコア 対 キャメルケース

古めかしいアンダースコア(`my_variable`) 対 キャメルケース(`myVariable`)の論争について一つ言及するとしたら、常に同じ様式を取っていればどちらを使おうと全く問題ありません。

本書では、JavaScriptで通常使われている様式であるキャメルケースを使っています。(ところで、表記はJavaScriptですよ、java_scriptではないですよ!).

唯一の例外は、ファイル名はアンダースコア(`my_file.js`)で表記し、CSSのクラスはハイフン(`.my-class`)で表記するという点です。理由としては、アンダースコアはファイルシステムで一番採用されている様式であり、CSSシンタックスではすでにハイフン(`font-family`, `text-align`, etc.)が取り入れられているからです。

<% end %>

### CSSの扱いについて

この本はCSSについての本ではありません。ですので、スタイリングについて詳しく述べ、あなたの足を引き止めことを避ける為、最初から全部のスタイルシートを作成しました。

CSSはMeteorによって自動でMinify（ファイル圧縮）、ロードするようになっています。そのため、他の静的アセットとは異なり、`/public`でなく`/client`の中に配置します。それでは、`client/stylesheets/` ディレクトリを作成して、以下の`style.css` ファイルを記述してください。

~~~css
.grid-block, .main, .post, .comments li, .comment-form {
  background: #fff;
  border-radius: 3px;
  padding: 10px;
  margin-bottom: 10px;
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
  -moz-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15); }

body {
  background: #eee;
  color: #666666; }

#main {
  position: relative;
}
.page {
  position: absolute;
  top: 0px;
  width: 100%;
}

.navbar {
  margin-bottom: 10px; }
  /* line 32, ../sass/style.scss */
  .navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px; }

#spinner {
  height: 300px; }

.post {
  /* For modern browsers */
  /* For IE 6/7 (trigger hasLayout) */
  *zoom: 1;
  position: relative;
  opacity: 1; }
  .post:before, .post:after {
    content: "";
    display: table; }
  .post:after {
    clear: both; }
  .post.invisible {
    opacity: 0; }
  .post.instant {
    -webkit-transition: none;
    -moz-transition: none;
    -o-transition: none;
    transition: none; }
  .post.animate{
    -webkit-transition: all 300ms 0ms;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in; }
  .post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left; }
  .post .post-content {
    float: left; }
    .post .post-content h3 {
      margin: 0;
      line-height: 1.4;
      font-size: 18px; }
      .post .post-content h3 a {
        display: inline-block;
        margin-right: 5px; }
      .post .post-content h3 span {
        font-weight: normal;
        font-size: 14px;
        display: inline-block;
        color: #aaaaaa; }
    .post .post-content p {
      margin: 0; }
  .post .discuss {
    display: block;
    float: right;
    margin-top: 7px; }

.comments {
  list-style-type: none;
  margin: 0; }
  .comments li h4 {
    font-size: 16px;
    margin: 0; }
    .comments li h4 .date {
      font-size: 12px;
      font-weight: normal; }
    .comments li h4 a {
      font-size: 12px; }
  .comments li p:last-child {
    margin-bottom: 0; }

.dropdown-menu span {
  display: block;
  padding: 3px 20px;
  clear: both;
  line-height: 20px;
  color: #bbb;
  white-space: nowrap; }

.load-more {
  display: block;
  border-radius: 3px;
  background: rgba(0, 0, 0, 0.05);
  text-align: center;
  height: 60px;
  line-height: 60px;
  margin-bottom: 10px; }
  .load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1); }

.posts .spinner-container{
  position: relative;
  height: 100px;
}

.jumbotron{
  text-align: center;
}
.jumbotron h2{
  font-size: 60px;
  font-weight: 100;
}

@-webkit-keyframes fadeOut {
  0% {opacity: 0;}
  10% {opacity: 1;}
  90% {opacity: 1;}
  100% {opacity: 0;}
}

@keyframes fadeOut {
  0% {opacity: 0;}
  10% {opacity: 1;}
  90% {opacity: 1;}
  100% {opacity: 0;}
}

.errors{
  position: fixed;
  z-index: 10000;
  padding: 10px;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0px;
  pointer-events: none;
}
.alert {
          animation: fadeOut 2700ms ease-in 0s 1 forwards;
  -webkit-animation: fadeOut 2700ms ease-in 0s 1 forwards;
     -moz-animation: fadeOut 2700ms ease-in 0s 1 forwards;
  width: 250px;
  float: right;
  clear: both;
  margin-bottom: 5px;
  pointer-events: auto;
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Re-arranged file structure." %>

<% note do %>

### CoffeeScriptについて

本書では、純粋なJavaScriptを書いていきますが、MeteorはCoffeeScriptを利用することもできます。CoffeeScript パッケージを追加して、準備オッケーです。:

`meteor add coffeescript`

<% end %>
