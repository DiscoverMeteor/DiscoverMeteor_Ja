---
title: コメント機能
slug: comments
complete: 100
date: 0010/01/01
number: 10
points: 10
photoUrl: http://www.flickr.com/photos/ikewinski/9414222270/
photoAuthor: Mike Lewinski
contents: コメントの表示|コメント投稿フォームの追加|今ある投稿のコメントだけを読み込む方法|postsへのコメント数をカウントするプロパティの追加
paragraphs: 34
version: 1.7
---

ソーシャルニュースサイトの目的はユーザーのコミュニティを作ることであり、
ユーザー同士が話し合える方法を提供しなければ、ユーザーコミュニティを作ることは難しいでしょう。
この章では、コメントを追加します！

では、コメントを保存するための新しいコレクションを作って、
基本的なテストデータをコレクションに入れることから始めていきましょう。

~~~js
Comments = new Mongo.Collection('comments');
~~~
<%= caption "lib/collections/comments.js" %>

~~~js
// Fixture data
if (Posts.find().count() === 0) {
  var now = new Date().getTime();

  // create two users
  var tomId = Meteor.users.insert({
    profile: { name: 'Tom Coleman' }
  });
  var tom = Meteor.users.findOne(tomId);
  var sachaId = Meteor.users.insert({
    profile: { name: 'Sacha Greif' }
  });
  var sacha = Meteor.users.findOne(sachaId);

  var telescopeId = Posts.insert({
    title: 'Introducing Telescope',
    userId: sacha._id,
    author: sacha.profile.name,
    url: 'http://sachagreif.com/introducing-telescope/',
    submitted: new Date(now - 7 * 3600 * 1000)
  });

  Comments.insert({
    postId: telescopeId,
    userId: tom._id,
    author: tom.profile.name,
    submitted: new Date(now - 5 * 3600 * 1000),
    body: 'Interesting project Sacha, can I get involved?'
  });

  Comments.insert({
    postId: telescopeId,
    userId: sacha._id,
    author: sacha.profile.name,
    submitted: new Date(now - 3 * 3600 * 1000),
    body: 'You sure can Tom!'
  });

  Posts.insert({
    title: 'Meteor',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://meteor.com',
    submitted: new Date(now - 10 * 3600 * 1000)
  });

  Posts.insert({
    title: 'The Meteor Book',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://themeteorbook.com',
    submitted: new Date(now - 12 * 3600 * 1000)
  });
}
~~~
<%= caption "server/fixtures.js" %>

新しく作ったコレクションにパブリッシュとサブスクリプションをすることを忘れずに。

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});

Meteor.publish('comments', function() {
  return Comments.find();
});
~~~
<%= caption "server/publications.js" %>
<%= highlight "5,6,7" %>

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  notFoundTemplate: 'notFound',
  waitOn: function() {
    return [Meteor.subscribe('posts'), Meteor.subscribe('comments')];
  }
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5~7" %>

<%= commit "10-1", "Added comments collection, pub/sub and fixtures." %>

この固定データ読み込みを実行するために、データベースをクリアする`meteor reset`を使う必要があります。
リセット後に、新しいアカウントを作ってログインし直すことを忘れずに！

最初に、私たちは(完全に偽物の)二人のユーザーを作りました。そして、
データベースに二人のデータを挿入して、その後でデータベースからデータを選択するために`id`を使います。
それから私たちは最初の投稿にユーザーがお互いにコメントを追加しました。投稿にコメントをリンクして（`postId`を使って）
この時は、`postId`を使って投稿と`userId`を使ってユーザーへのコメントにリンクしています。
私たちは非正規化したフィールドである`author`と一緒に投稿日時と本文を各コメントに追加しました。　

また、私たちはルーターを増やしてコメントと投稿を待つようにしました。

### コメントを表示する

データベースにコメントを入れるのは良いのですが、私たちはディスカッションページにコメントを表示する必要があります。
そろそろこのプロセスに慣れてきているころでしょうか。
というのも、あなたはこのステップに関連したアイデアをすでに持っているからです。

~~~html
<template name="postPage">
  {{> postItem}}

  <ul class="comments">
    {{#each comments}}
      {{> commentItem}}
    {{/each}}
  </ul>
</template>
~~~
<%= caption "client/templates/posts/post_page.html" %>
<%= highlight "3~7" %>

~~~js
Template.postPage.helpers({
  comments: function() {
    return Comments.find({postId: this._id});
  }
});
~~~
<%= caption "client/templates/posts/post_page.js" %>
<%= highlight "2~4" %>

私たちは投稿のテンプレート内に`{{#each comments}}`ブロックを置いたので、`this`は`comments`ヘルパー内の投稿です。
関連するコメントを見つけるために、私たちは`postId`属性を使って投稿にリンクされたコメントをチェックします。
　
ヘルパーとSpacebarsを学習したことを考えると、コメントをレンダリングすることはかなり簡単です。
すべてのコメントの情報を格納するために、私たちは`views`内に新しく`comments`ディレクトリを作りました。

~~~html
<template name="commentItem">
  <li>
    <h4>
      <span class="author">{{author}}</span>
      <span class="date">on {{submittedText}}</span>
    </h4>
    <p>{{body}}</p>
  </li>
</template>
~~~
<%= caption "client/templates/comments/comment_item.html" %>


それでは、よりユーザーフレンドリーなフォーマットに`submitted`日付をフォーマットするため、
手早くテンプレートヘルパーを設定しましょう：

~~~js
Template.commentItem.helpers({
  submittedText: function() {
    return this.submitted.toString();
  }
});
~~~
<%= caption "client/templates/comments/comment_item.js" %>

それから、それぞれの投稿にコメントの数を表示します。:

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        submitted by {{author}},
        <a href="{{pathFor 'postPage'}}">{{commentsCount}} comments</a>
        {{#if ownPost}}<a href="{{pathFor 'postEdit'}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn btn-default">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/templates/posts/post_item.html" %>
<%= highlight "6,7" %>

そして、`commentsCount`ヘルパーを`post_item.js`に追加します。:

~~~js
Template.postItem.helpers({
  ownPost: function() {
    return this.userId === Meteor.userId();
  },
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  },
  commentsCount: function() {
    return Comments.find({postId: this._id}).count();
  }
});
~~~
<%= caption "client/templates/posts/post_item.js" %>
<%= highlight "9,10,11" %>

<%= commit "10-2", "Display comments on `postPage`." %>

これで、固定データのコメントを表示して見ることができるはずです：

<%= screenshot "10-1", "Displaying comments" %>

### コメントをサブミットする

ユーザーが新しいコメント作るための方法を追加します。
私たちがたどるプロセスはユーザーが新しい投稿を作成する許可する方法にとても似ています。　

私たちは各投稿の下にコメント投稿ボックスを作ることから始めていきましょう。　

~~~html
<template name="postPage">
  {{> postItem}}

  <ul class="comments">
    {{#each comments}}
      {{> commentItem}}
    {{/each}}
  </ul>

  {{#if currentUser}}
    {{> commentSubmit}}
  {{else}}
    <p>Please log in to leave a comment.</p>
  {{/if}}
</template>
~~~
<%= caption "client/templates/posts/post_page.html" %>
<%= highlight "10~14" %>

それからコメントフォームテンプレートを作ります。:

~~~html
<template name="commentSubmit">
  <form name="comment" class="comment-form form">
    <div class="form-group {{errorClass 'body'}}">
        <div class="controls">
            <label for="body">Comment on this post</label>
            <textarea name="body" id="body" class="form-control" rows="3"></textarea>
            <span class="help-block">{{errorMessage 'body'}}</span>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Add Comment</button>
  </form>
</template>
~~~
<%= caption "client/templates/comments/comment_submit.html" %>

<%= screenshot "10-2", "The comment submit form" %>

コメントをサブミットするために、投稿をサブミットするためにしたものと同様の方法で、
`comment_submit.js`で`comment`メソッドを呼び出します。:

~~~js
Template.commentSubmit.created = function() {
  Session.set('commentSubmitErrors', {});
}

Template.commentSubmit.helpers({
  errorMessage: function(field) {
    return Session.get('commentSubmitErrors')[field];
  },
  errorClass: function (field) {
    return !!Session.get('commentSubmitErrors')[field] ? 'has-error' : '';
  }
});

Template.commentSubmit.events({
  'submit form': function(e, template) {
    e.preventDefault();

    var $body = $(e.target).find('[name=body]');
    var comment = {
      body: $body.val(),
      postId: template.data._id
    };

    var errors = {};
    if (! comment.body) {
      errors.body = "Please write some content";
      return Session.set('commentSubmitErrors', errors);
    }

    Meteor.call('commentInsert', comment, function(error, commentId) {
      if (error){
        throwError(error.reason);
      } else {
        $body.val('');
      }
    });
  }
});
~~~
<%= caption "client/templates/comments/comment_submit.js" %>

以前、`post`をサーバーサイドのMeteorメソッドをセットアップしたように、
コメントを作るために`comment`Meteorメソッドをセットアップして、
すべてがちゃんとしているかチェックして、最後に新しいコメントをcommentsコレクションに挿入します。

~~~js
Comments = new Mongo.Collection('comments');

Meteor.methods({
  commentInsert: function(commentAttributes) {
    check(this.userId, String);
    check(commentAttributes, {
      postId: String,
      body: String
    });

    var user = Meteor.user();
    var post = Posts.findOne(commentAttributes.postId);

    if (!post)
      throw new Meteor.Error('invalid-comment', 'You must comment on a post');

    comment = _.extend(commentAttributes, {
      userId: user._id,
      author: user.username,
      submitted: new Date()
    });

    return Comments.insert(comment);
  }
});
~~~
<%= caption "lib/collections/comments.js" %>
<%= highlight "3~25" %>

<%= commit "10-3", "Created a form to submit comments." %>

ここでは手が込んだことは何もしていません。
ただユーザーがログインしているか、コメントに本文があるか、コメントが投稿にリンクされているかチェックしています。

### コメントのサブスクリプションの操作

今のところ、私たちはすべての投稿にすべてのコメントをパブリッシュしています。
これはちょっと無駄が多いように見えます。
結局、私たちはどんなときでもコメントデータの小さな一部分を使うだけなので、
どのコメントをパブリッシュさせるかコントロールするために
パブリケーションとサブスクリプションを改善していきましょう。　　

この点を考えると、`comments`のパブリケーションにサブスクライブする必要のある時というのは、
ユーザーが投稿の個別ページにアクセスする時だけなので、
私たちは特定の投稿に関係するコメント部分だけを読み込む必要があります。

最初のステップとして、私たちはコメントにサブスクライブする方法を変えていきます。
今まで私たちは*ルーター*レベルでサブスクライブしていました。
つまり、私たちはルーターが初期化するときにすべてのデータを一度に読み込んでいます。

しかし、私たちはサブスクリプションがパスのパラメータで決めるようにしたいのです。
パラメータはどの時点でも明確に変えることができます。
そのため、私たちはサブスクリプションコードを*ルーター*レベルから*ルート*レベルに 移行する必要があります。

これは別の結果です：アプリを初期化する時にデータをロードするかわりに、
今の私たちはルートにヒットした時はいつもロードしています。
これはアプリ内を見ている間にロード時間またせてしまいます、
しかし、これはあなたが永遠にすべてのデータセットをフロント側にもたせるつもりでない限り、
避けられないマイナス面です。

最初に、私たちは`configure`ブロックで`Meteor.subscribe('comments')`を削除して
コメントをあらかじめ読み込むことをストップします(前の状態に戻すと言い換えてもいいでしょう)
：

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  notFoundTemplate: 'notFound',
  waitOn: function() {
    return Meteor.subscribe('posts');
  }
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5" %>

それから、新たにルートレベルの`waitOn`関数を`postPage`ルートへ追加します。

~~~js
Router.map(function() {

  //...

  this.route('postPage', {
    path: '/posts/:_id',
    waitOn: function() {
      return Meteor.subscribe('comments', this.params._id);
    },
    data: function() { return Posts.findOne(this.params._id); }
  });

  //...

});
~~~
<%= caption "lib/router.js" %>
<%= highlight "7~9" %>

私たちは this.params._id をサブスクリプションへの引数として渡していることにお気づきかと思います。
そのため、現在の投稿に帰属しているコメントへのデータセットを制限するために新しい情報を使いましょう。　

<%= screenshot "10-3", "Our comments are gone!" %>

１つだけ問題があります：ホームページに戻るときに、すべての投稿でコメントは0だと言っています。

### コメントのカウント

　この理由はすぐに明らかになります：
唯一`postPage`ルート上でコメントを読み込むので、
`commentsCount`ヘルパー内で`Comments.find({postId:this._id})`を呼び出すときに
Meteorは私たちを提供するために必要なクライアント側のデータを見つけることができません。

この問題に対処する最も良い方法は、投稿にコメントの数を*非正規化*することです。
(これが何を意味しているのか自信がなくでも、問題ありません。次の補足事項でカバーします！)
これまで見てきたように、コードにちょっとだけ複雑なものを追加していますが、
投稿リストを表示する上で、_すべて_のコメントにパブリッシュする必要がなくなったことで、
私たちが得るパフォーマンスベネフィットには、それだけの価値があります。

`post`データ構造に`commentsCount`を追加することで　これを実現します。
はじめに、私たちは投稿のテストデータをアップデートします。
（さらに、これをリロードするために meteor reset をします。後でユーザーアカウントを作り直すことを忘れずに。）：

~~~js
// Fixture data
if (Posts.find().count() === 0) {
  var now = new Date().getTime();

  // create two users
  var tomId = Meteor.users.insert({
    profile: { name: 'Tom Coleman' }
  });
  var tom = Meteor.users.findOne(tomId);
  var sachaId = Meteor.users.insert({
    profile: { name: 'Sacha Greif' }
  });
  var sacha = Meteor.users.findOne(sachaId);

  var telescopeId = Posts.insert({
    title: 'Introducing Telescope',
    userId: sacha._id,
    author: sacha.profile.name,
    url: 'http://sachagreif.com/introducing-telescope/',
    submitted: new Date(now - 7 * 3600 * 1000),
    commentsCount: 2
  });

  Comments.insert({
    postId: telescopeId,
    userId: tom._id,
    author: tom.profile.name,
    submitted: new Date(now - 5 * 3600 * 1000),
    body: 'Interesting project Sacha, can I get involved?'
  });

  Comments.insert({
    postId: telescopeId,
    userId: sacha._id,
    author: sacha.profile.name,
    submitted: new Date(now - 3 * 3600 * 1000),
    body: 'You sure can Tom!'
  });

  Posts.insert({
    title: 'Meteor',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://meteor.com',
    submitted: new Date(now - 10 * 3600 * 1000),
    commentsCount: 0
  });

  Posts.insert({
    title: 'The Meteor Book',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://themeteorbook.com',
    submitted: new Date(now - 12 * 3600 * 1000),
    commentsCount: 0
  });
}
~~~
<%= caption "server/fixtures.js" %>
<%= highlight "20,21,45,46,54,55" %>

固定ファイル(`fixtures.js`)を更新するときにいつものように、
データベースを`meteor reset`して再実行される事を確認する必要があります。

次に、すべての新しい投稿が0コメントからスタートするようにします。：　

~~~js
//...

var post = _.extend(postAttributes, {
  userId: user._id,
  author: user.username,
  submitted: new Date(),
  commentsCount: 0
});

var postId = Posts.insert(post);

//...
~~~
<%= caption "collections/posts.js" %>
<%= highlight "6,7" %>

それから、MongoDBの`$inc`演算子を使うことで新しいコメントを作る時に、
関係する`commentsCount`を更新します。(これで数値に関するフィールドを１つずつ増加させます。)：　

~~~js
//...

comment = _.extend(commentAttributes, {
  userId: user._id,
  author: user.username,
  submitted: new Date()
});

// update the post with the number of comments
Posts.update(comment.postId, {$inc: {commentsCount: 1}});

return Comments.insert(comment);

//...
~~~
<%= caption "collections/comments.js "%>
<%= highlight "9,10" %>

最後に、postのフィールドに直接アクセスするため、単純に`client/templates/posts/post_item.js`から`commentsCount` helperを削除します。

<%= commit "10-5", "Denormalized the number of comments into the post." %>


これでユーザー同士で話し合えるようになったので、ユーザーが新しいコメントに気づかないとしたら、
残念なことです。なんと驚くことに、次の章はこれを防ぐために通知を実装する方法を説明します！。
